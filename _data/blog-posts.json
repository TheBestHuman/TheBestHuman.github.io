[
  {
    "id": "660050d824eea30001bc6b0e",
    "uuid": "f330c210-0f94-40e4-aed1-cc1dec20fd44",
    "title": "Writing Job Descriptions to Attract Talented Software Engineers",
    "slug": "writing-good-job-descriptions",
    "html": "<p>Whether the current talent pool of software engineers is large or small; as a hiring manager, you have essentially the same problem: attracting and identifying talented individuals that will be able to add value to your team.</p><p><strong>In a saturated job market</strong>, you'll get tons of CVs, but you'll need to be incredibly discerning to find folks that will meet your teams' needs.</p><p><strong>In a market where the talent pool is limited</strong>, you will really need to sell yourself, your team, and your organization to get great engineers to apply to your positions in the first place.</p><p>In either case, your candidates' first impression of you and your team is in the job posting, and many hiring managers don't take the time to thoughtfully consider what their job description communicates to potential candidates.</p><p>Here is some practical advice for making a great first impression, and attracting great talent (identifying and hiring great talent during the interview process is a topic for another time.) </p><h2 id=\"include-the-salary-range-in-the-job-posting\">Include the Salary Range in the Job Posting</h2><p>This should be a no-brainer at this point, but the absolute worst managers to work for are ones that waste your time. If you don't include the salary range in your job description, it's either because you pay below market value, or you don't have transparent pay scales and don't want your current employees to know how much you're willing to pay the new team member. Either way, it's a huge red flag and most great developers will scroll right past.</p><p>Some localities <a href=\"https://www.postercompliance.com/blog/wage-transparency-laws-2023/?ref=pr.ogra.ms\" rel=\"noreferrer\">require</a> a salary range to be posted for companies that have more than X number of employees or meet other criteria. Many hiring managers use this as an opportunity to post a <a href=\"https://www.forbes.com/sites/jackkelly/2023/06/06/companies-posting-wide-salary-ranges-on-job-advertisements-are-making-a-mockery-of-pay-transparency-laws/?sh=3489989e4865&ref=pr.ogra.ms\" rel=\"noreferrer\">range that's so wide</a> that it's meaningless.</p><p>Always provide a meaningful range in your job postings. Otherwise, you’re clogging your hiring pipeline and wasting your own time.</p><h2 id=\"clearly-state-whether-the-position-is-remote\">Clearly State Whether the Position is Remote</h2><p>Be very clear <strong>and truthful </strong>in your job description about whether the position is remote, hybrid, or in-office fulltime. Include any information about travel for joint meetings, such as quarterly retreats or in-person client meetings. Like salary, you and the candidate should be pre-aligned on this before you even have a phone screen.</p><p>If you're hiring for a remote-capable job (which applies to all software engineering jobs,) and you're forcing people to come to an office, please reconsider how committed you are to hiring great talent. Not everyone likes working remotely, but how many great engineers that prefer in-office live within an hour's commute to your office?</p><p>As a good hiring manager, also make sure that if the job description was written as remote, that it is codified in the employment contract. This will add a small layer of protection against future return-to-office initiatives (but if leadership really wants folks in the office, <a href=\"https://www.bloomberg.com/news/articles/2022-11-10/musk-s-first-email-to-twitter-staff-ends-remote-work?ref=pr.ogra.ms\" rel=\"noreferrer\">there's not much you can do</a>.)</p><h2 id=\"be-transparent-about-visa-sponsorship\">Be Transparent About Visa Sponsorship</h2><p>These first three tips can be summarized as <strong><em>don't waste people's time</em></strong>, but this is an order of magnitude more important when talking about visa sponsorship. If you misrepresent your company's visa sponsorship process, and the candidate only finds out the truth after being hired, you're risking their ability to remain in the country. Familiarize yourself with the process ahead of time and be clear about what your company is open to in the posting.</p><h2 id=\"be-specific-about-requirements\">Be Specific About Requirements</h2><p>If you have interview questions about a specific technology, or really need someone with a lot of expertise with a niche library, list that in the description. By the same token, take a hard look at your list of requirements and decide if each is really necessary or just nice to have.</p><p>The idea is to be up-front about how you will be evaluating candidates without unnecessarily limiting your audience. With that in mind;</p><h2 id=\"consider-equivalent-experience\">Consider Equivalent Experience</h2><p>Many hiring managers include a college degree as a requirement, even for mid or senior level engineering positions. If someone has had 5 years of real-world experience, does it matter if they originally learned software development from a JavaScript from a boot camp? A fantastic self-starter can be a massive asset to your team, excluding them from the get-go really limits your choices. </p><p>In the same vein, is a particular technology really required, or are there comparable skills that would expand your candidate pool? For example, someone that has 3 years of experience in Angular could probably pick up React pretty quickly.</p><p>In fact, years of experience in X technology is a pretty useless metric for competence in that technology. What matters is level of proficiency, which people tend to be pretty honest about. You can evaluate that proficiency in the interview. Instead of years of experience in particular technologies, use language like “working knowledge,” “proficient in,” or “expert in.” Never ever use words like guru, rock star, or ninja (see <strong>Use Inclusive Language</strong> below.)</p><h2 id=\"be-truthful-about-reponsibilities\">Be Truthful About Reponsibilities</h2><p>If you’re hiring a hands-on manager or lead, include a breakdown of how much time you're expecting the person to be coding vs. leadership and mentoring. If you’re working with a legacy codebase, include what percentage of day-to-day work is bug fixes vs. new features.</p><p>The most important rule of writing a good responsibilities section is to be as honest as possible. hiring someone that expects to be writing mostly features, but ends up working primarily on bug fixes doesn’t help you or the candidate. They’ll leave the company for greener pastures and you’ll just be redoing this process again in three months. Or worse, they’ll stay and hate their job. </p><h2 id=\"use-inclusive-language\">Use Inclusive Language</h2><p>Actively combatting systemic discrimination is a moral imperative. As a hiring manager and manager in general, recognize that you are participating in a system designed to oppress people based on race, gender, sexuality and physical ability. treating everyone fairly and equitably is the <em>bare minimum</em>. You should strive to find ways to actively reach out to systemically marginalized folks.</p><p>This philosophy aligns very well with writing an effective job posting. Using language that demonstrates dedication to being welcoming to all will give you more well qualified folks to choose from.</p><p>This shouldn’t only be limited to boilerplate inclusivity text at the end, though crafting a good version of that can be helpful. </p><p>To start, don’t use gendered pronouns. Run the entire job description through a gender bias decoder, such as <a href=\"http://gender-decoder.katmatfield.com/?ref=pr.ogra.ms\">http://gender-decoder.katmatfield.com</a>.  Use an LLM to try to find bias in your job description.</p><p>Don’t use words like guru, ninja, master, samurai or rock-star. Not only do these words carry cultural and gender significance that you’re probably not trying to invoke, but they also suggest an unrealistic standard that will discourage qualified candidates and they imply a terrible work-life balance. Assuming that supernatural software engineering powers don’t exist, the only way a candidate could live up to a superfluous title is by overworking. </p><p>These methods are not perfect, so continue to do your homework by reading scholarship on anti-racism, feminism, and systemic oppression. </p><h2 id=\"in-summary\">In Summary</h2><p>As a hiring manager, your job posting is the first impression candidates have of you, your team, and your company. the keys are: don’t wast anyone’s time, be specific about requirements, and accurately communicate the working environment. Also remember that it’s your responsibility to live up to your good first impression.</p>",
    "comment_id": "660050d824eea30001bc6b0e",
    "feature_image": null,
    "featured": false,
    "visibility": "public",
    "created_at": "2024-03-24T12:12:08.000-04:00",
    "updated_at": "2024-05-12T11:01:38.000-04:00",
    "published_at": "2024-05-12T11:01:38.000-04:00",
    "custom_excerpt": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "custom_template": null,
    "canonical_url": null,
    "url": "https://pr.ogra.ms/writing-good-job-descriptions/",
    "excerpt": "Whether the current talent pool of software engineers is large or small; as a hiring manager, you have essentially the same problem: attracting and identifying talented individuals that will be able to add value to your team.\n\nIn a saturated job market, you'll get tons of CVs, but you'll need to be incredibly discerning to find folks that will meet your teams' needs.\n\nIn a market where the talent pool is limited, you will really need to sell yourself, your team, and your organization to get grea",
    "reading_time": 5,
    "access": true,
    "comments": false,
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "email_subject": null,
    "frontmatter": null,
    "feature_image_alt": null,
    "feature_image_caption": null
  },
  {
    "id": "65e4b3e78cbfcd0001b97da0",
    "uuid": "e3ec1869-b584-46e0-8f0f-a29e8d67154a",
    "title": "5 Custom Linter Rules to Turbocharge Your Team's Productivity",
    "slug": "linting-rules",
    "html": "<p></p><p><a href=\"https://en.wikipedia.org/wiki/Lint_(software)?ref=pr.ogra.ms\" rel=\"noreferrer\">Linters</a> such <a href=\"https://palantir.github.io/tslint/?ref=pr.ogra.ms\" rel=\"noreferrer\">TSLint</a> and <a href=\"https://github.com/pylint-dev/pylint?ref=pr.ogra.ms\" rel=\"noreferrer\">pyLint</a> can be a great way to enforce standards on your team’s codebase; making your code more cohesive and easier to understand. Here are some helpful coding standards that you can impose using custom linting rules to elevate your team's output.</p><p></p><h2 id=\"1-something-to-think-about\"><strong>1. Something to think about</strong></h2><p>Ending a sentence with a preposition is a huge grammatical no-no. To keep your code grammatically correct, <em>forbid comments that end with a preposition.</em> </p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">//Refactor later; this is the best hack I could think of.</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">❌ Invalid</strong></b></p></figcaption></figure><p>It's very important to rigidly follow established grammatical rules. This comment is confusing and unprofessional.</p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">//Refactor later; this is the best hack of which I could think.</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">✅ Correct</strong></b></p></figcaption></figure><p>With just a few tweaks, you can change a garbled sentence into a comment that \"just sounds right.\" Other team members will appreciate your professionalism and rigorous adherence to the rules prescribed by grammar.</p><p></p><h2 id=\"2-strong-password-policy\">2. Strong Password Policy</h2><p>Preventing cyberattacks are everyone's responsibility. When accessing outside resources in code, it's good to make sure that your team takes security seriously. Make sure that your resources have an added layer of security by ensuring strong password policies when storing secrets in code.</p><p>This goes double for code committed to public repositories. Put your best foot forward and show how security minded your team is by only committing plaintext passwords that follow strict policies.</p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">var username = \"admin\";\n// Password with common words, no numbers,\n// and no special characters!\nvar password = \"seven-less-abroad-truly\";\n\ninternalAccountingAPI.login(username, password);</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">❌ Insecure Password</strong></b></p></figcaption></figure><p>In this example, you can see that the developer committed code with an insecure password. The password is four random common words, containing no capital letters, no numbers, no special characters, and it is longer than the standard 8 characters. Using such a weak password makes your internal accounting API vulnerable. </p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">var username = \"admin\";\n// Common words are obfuscated, length is \n// between 8-12 characters, and password \n// includes a number and special characters\nvar password = \"P@ssword1!\";\n\ninternalAccountingAPI.login(username, password);</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">✅ Rock Solid</strong></b></p></figcaption></figure><p>Now this is a password you can confidently commit to your shared (or public!) repo. It obfuscates common words, contains special characters, capital letters, a number, and is the correct length. The accounting team will thank you for keeping their API completely secure.</p><p></p><h2 id=\"3-oxford-parentheses\"><strong>3. Oxford Parentheses</strong></h2><p>Although functionally equivalent, exposed conditionals can be confusing. Add a rule that each conditional must be in its own parenthetical to reduce confusion.</p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">if (a + b &gt; 100 &amp;&amp; a + b &lt; 100 &amp;&amp; isConnected == true)</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">❌</strong></b> <b><strong style=\"white-space: pre-wrap;\">Wrong</strong></b></p></figcaption></figure><p>These logical comparisons are a mess to read! Without proper parentheses, it's impossible to know which statements will be evaluated first. Some compilers may evaluate <strong>100 &amp;&amp; isConnected</strong> first and cause undefined behavior.  </p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">if ((a + b &gt; 100) &amp;&amp; (a + b &lt; 100) &amp;&amp; (isConnected == true))</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">✅ Perfect</strong></b></p></figcaption></figure><p>The added parentheses force the compiler to evaluate your conditionals in the correct order. I call this Oxford Parentheses; named after the Oxford Comma in english, which is the best way to list things out.</p><p></p><h2 id=\"4-radical-accountability\"><strong>4. Radical Accountability</strong></h2><p>It's common for developers to add a //TODO comment when something they're working on needs to be updated later. Make sure they hold themselves accountable by forcing<strong> </strong>such comments to include a due date, and make sure that due date is in the future.</p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">//TODO: Fix this hacky code</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">❌</strong></b> <b><strong style=\"white-space: pre-wrap;\">When?</strong></b></p></figcaption></figure><p>This comment is unhelpful because it just defers the activity to a nebulous later date. It's impossible to track and even harder to evaluate this developer's productivity.</p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">//TODO (Due: 20260402T015229Z) Fix this hacky code</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">✅ Accountable.</strong></b></p></figcaption></figure><p>This is great because it holds the developer accountable to their date. If you couple this rule with a post-commit hook that automatically adds a user story to your task management system, you can correctly track this work. Be sure to use the correct <a href=\"https://en.wikipedia.org/wiki/ISO_8601?ref=pr.ogra.ms\" rel=\"noreferrer\">ISO-8601</a> date/time format and industry standard UTC to increase readability.</p><p></p><h2 id=\"5-everyone-chimes-in\">5. Everyone Chimes In</h2><p>Exceptions are a valuable debugging and flow control mechanism, but it can be hard to pinpoint exactly where an exception originated. Make sure your team maintains an accurate trail of breadcrumbs by mandating that all exceptions must be caught and re-thrown in each method they pass through. </p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">  let resource = null;\n  try {\n    resource = getResource(); // Acquire the resource\n    // Do stuff with resource\n  } finally {\n    resource?.close(); // Ensure the resource is closed, assuming it has a close method\n  }</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">❌ Misses Lots of Exceptions</strong></b></p></figcaption></figure><p><strong>getResource()</strong> above could throw all sorts of exceptions without this code knowing. You can't properly control the flow of your program without catching exceptions.</p><hr><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-TypeScript\">  let resource = null;\n  try {\n    resource = getResource(); // Acquire the resource\n    // Directly use the resource in a one-liner operation\n  } catch (error) {\n    throw new Error(\"Error encountered.\");\n  } finally {\n    resource?.close(); // Ensure the resource is closed, assuming it has a close method\n  }</code></pre><figcaption><p><b><strong style=\"white-space: pre-wrap;\">✅ Catches Everything!</strong></b></p></figcaption></figure><p>This is the proper use of exceptions. You wouldn't want highly technical error messages and ugly stack traces to bubble up to other methods; it's best to provide the calling methods a clean exception. Bonus points for including helpful status codes in your exception messages.</p>",
    "comment_id": "65e4b3e78cbfcd0001b97da0",
    "feature_image": null,
    "featured": false,
    "visibility": "public",
    "created_at": "2024-03-03T12:31:19.000-05:00",
    "updated_at": "2024-04-01T23:04:39.000-04:00",
    "published_at": "2024-03-04T16:36:00.000-05:00",
    "custom_excerpt": null,
    "codeinjection_head": null,
    "codeinjection_foot": null,
    "custom_template": null,
    "canonical_url": null,
    "url": "https://pr.ogra.ms/linting-rules/",
    "excerpt": "Linters such TSLint and pyLint can be a great way to enforce standards on your team’s codebase; making your code more cohesive and easier to understand. Here are some helpful coding standards that you can impose using custom linting rules to elevate your team's output.\n\n\n\n\n1. Something to think about\n\nEnding a sentence with a preposition is a huge grammatical no-no. To keep your code grammatically correct, forbid comments that end with a preposition.\n\n//Refactor later; this is the best hack I co",
    "reading_time": 3,
    "access": true,
    "comments": false,
    "og_image": null,
    "og_title": null,
    "og_description": null,
    "twitter_image": null,
    "twitter_title": null,
    "twitter_description": null,
    "meta_title": null,
    "meta_description": null,
    "email_subject": null,
    "frontmatter": null,
    "feature_image_alt": null,
    "feature_image_caption": null
  }
]